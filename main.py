import os
from logic import DB_Manager
from config1 import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

manager = DB_Manager(DATABASE)
bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

PHOTO_FOLDER = "project_photos"
os.makedirs(PHOTO_FOLDER, exist_ok=True)

def cansel(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

# –§—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
def no_projects(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup(row_width=1)
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π)
def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup
attributes_of_projects = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞': ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
    "–°—Å—ã–ª–∫–∞": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
    "–°—Ç–∞—Ç—É—Å": ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]
}
def get_status_keyboard(statuses):
    keyboard = InlineKeyboardMarkup()
    for status_id, status_name in statuses:
        keyboard.add(InlineKeyboardButton(text=status_name, callback_data=f"status_{status_id}"))
    return keyboard

def save_photo(file_id, file_name):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_path = os.path.join(PHOTO_FOLDER, file_name)
    with open(file_path, "wb") as new_file:
        new_file.write(downloaded_file)
    return file_path

@bot.message_handler(commands=['add_photo'])
def add_photo_command(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        project_names = [x[2] for x in projects]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=gen_markup(project_names))
        bot.register_next_step_handler(message, request_photo, project_names=project_names)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!")

def request_photo(message, project_names):
    project_name = message.text
    if project_name not in project_names:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(project_names))
        bot.register_next_step_handler(message, request_photo, project_names=project_names)
        return
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞!")
    bot.register_next_step_handler(message, save_project_photo, project_name=project_name)

def save_project_photo(message, project_name):
    if not message.photo:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        bot.register_next_step_handler(message, save_project_photo, project_name=project_name)
        return
    file_id = message.photo[-1].file_id
    file_name = f"{project_name}_{message.from_user.id}.jpg"
    file_path = save_photo(file_id, file_name)
    manager.update_project_photo(project_name, message.from_user.id, file_path)
    bot.send_message(message.chat.id, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
def info_project(message, user_id, project_name):
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name) or '–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    photo_path = info[4] if len(info) > 4 else None
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        for project in projects:
            project_id = project[0]
            project_name = project[2]
            description = project[3]
            link = project[4]
            photo_path = project[6]
    status = manager.get_status_name(project[5]) if hasattr(manager, "get_status_name") else "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    skills = manager.get_project_skills(project_id) if hasattr(manager, "get_project_skills") else []
    if isinstance(skills, list):
        skills = ', '.join(skills) if skills else "–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    caption_text = (f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {project_name}\n"
                            f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link}\n"
                            f"‚ö°Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                            f"üõ† <b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
                            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n")
    if photo_path:
        bot.send_photo(message.chat.id, open(photo_path, 'rb'), caption=caption_text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, caption_text, parse_mode='HTML')

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤!
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö! üöÄ

–ò—Å–ø–æ–ª—å–∑—É–π /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.
""", parse_mode='HTML')
    info(message)

    
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, """
üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/new_project - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üÜï  
/projects - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üìú  
/delete - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ùå  
/skills - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ –∫ –ø—Ä–æ–µ–∫—Ç—É üõ†  
/update_projects - –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ üîÑ  
/add_photo - –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –ø—Ä–æ–µ–∫—Ç—É üì∑  

üîç –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!  
""", parse_mode='HTML')

@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

def name_project(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, description_project, data=data)

def description_project(message, data):
    data.append(message.text)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(message, link_project, data=data)

def link_project(message, data):
    data.append(message.text)
    statuses = [x[1] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

def callback_project(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in [x[1] for x in manager.get_statuses()]:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    
    manager.insert_project([tuple(data)])  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 5 –∑–Ω–∞—á–µ–Ω–∏–π
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")



@bot.message_handler(commands=['skills'])
def skill_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)


def skill_project(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if project_name not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        skills = [x[1] for x in manager.get_skills()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

def set_skill(message, project_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
        
    if skill not in skills:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≤—ã–∫. –Ω–µ –∏–∑ —Å–ø–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    
    project_id = manager.get_project_id(project_name, user_id)
    skill_id = manager.get_skill_id(skill)  

    if project_id and skill_id:
        manager.insert_skill(project_id, skill_id)  
        bot.send_message(message.chat.id, f'–ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É {project_name}')
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –Ω–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)

    if projects:
        for project in projects:
            project_id = project[0]
            project_name = project[2]
            description = project[3]
            link = project[4]
            photo_path = project[6]  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã

            status = manager.get_status_name(project[5]) if hasattr(manager, "get_status_name") else "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            skills = manager.get_project_skills(project_id) if hasattr(manager, "get_project_skills") else []
            if isinstance(skills, list):
                skills = ', '.join(skills) if skills else "–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"

            caption_text = (f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {project_name}\n"
                            f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link}\n"
                            f"‚ö°Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                            f"üõ† <b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
                            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n")

            # –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if photo_path:
                bot.send_photo(message.chat.id, open(photo_path, 'rb'), caption=caption_text, parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, caption_text, parse_mode='HTML')

        # markup = gen_inline_markup([x[2] for x in projects])  # –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        # bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=markup)
    else:
        no_projects(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    
    if projects:
        text = "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:\n\n"
        text += "\n".join([f"üìå {x[2]}" for x in projects])
        project_names = [x[2] for x in projects]
        
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(project_names))
        bot.register_next_step_handler(message, delete_project, project_names=project_names)
    else:
        no_projects(message)

def delete_project(message, project_names):
    project_name = message.text
    user_id = message.from_user.id

    if project_name == cancel_button:
        cansel(message)
        return

    if project_name not in project_names:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=gen_markup(project_names))
        bot.register_next_step_handler(message, delete_project, project_names=project_names)
        return

    # –ü–æ–ª—É—á–∞–µ–º project_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    project_id = manager.get_project_id(project_name, user_id)
    if not project_id:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–µ–∫—Ç <b>{project_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode="HTML")

# @bot.message_handler(commands=['delete'])
# def delete_handler(message):           
#     user_id = message.from_user.id
#     projects = manager.get_projects(user_id)
#     if projects:
#         text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
#         projects = [x[2] for x in projects]
#         bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
#         bot.register_next_step_handler(message, delete_project, projects=projects)
#     else:
#         no_projects(message)

# def delete_project(message, projects):
#     project = message.text
#     user_id = message.from_user.id

#     if message.text == cancel_button:
#         cansel(message)
#         return
#     if project not in projects:
#         bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(projects))
#         bot.register_next_step_handler(message, delete_project, projects=projects)
#         return
#     project_id = manager.get_project_id(project)
#     manager.delete_project(user_id, project_id)
#     bot.send_message(message.chat.id, f'–ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª–µ–Ω!')


@bot.message_handler(commands=['update_projects'])
def update_project(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
    else:
        no_projects(message)

def update_project_step_2(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

def update_project_step_3(message, project_name):
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[1] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

def update_project_step_4(message, project_name, attribute): 
    update_info = message.text
    if attribute == "status_id":
        rows = manager.get_statuses()
        
        status_names = [x[1] for x in rows]  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤

        if update_info in status_names:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
            return
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(status_names))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)

    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!)")



@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects =[ x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
        return
    bot.reply_to(message, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

    
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()